from typing import List


class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        self.route = []
        self.rowC = [[False] * 10 for i in range(9)]
        self.colC = [[False] * 10 for i in range(9)]
        self.squareC = [[False] * 10 for i in range(9)]

        for i in range(9):
            for j in range(9):
                if board[i][j] == '.':
                    self.route.append((i, j))
                else:
                    self.rowC[i][int(board[i][j])] = True
                    self.colC[j][int(board[i][j])] = True
                    self.squareC[int(i / 3) * 3 + int(j / 3)][int(board[i][j])] = True

        self.len = len(self.route)
        self.recursive(board, 0)

    def recursive(self, board: List[List[str]], routeIndex: int):
        if self.len == routeIndex:
            return True

        y = self.route[routeIndex][0]
        x = self.route[routeIndex][1]

        for n in range(1, 10):
            int_n = int(n)
            if self.rowC[y][int_n] or self.colC[x][int_n] or self.squareC[int(y / 3) * 3 + int(x / 3)][int_n]:
                continue

            board[y][x] = str(n)
            self.rowC[y][int_n] = True
            self.colC[x][int_n] = True
            self.squareC[int(y / 3) * 3 + int(x / 3)][int_n] = True
            if self.recursive(board, routeIndex + 1):
                return True
            self.rowC[y][int_n] = False
            self.colC[x][int_n] = False
            self.squareC[int(y / 3) * 3 + int(x / 3)][int_n] = False
            board[y][x] = '.'
        return False


solution = Solution()
solution.solveSudoku([[".", ".", "9", "7", "4", "8", ".", ".", "."], ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                      [".", "2", ".", "1", ".", "9", ".", ".", "."], [".", ".", "7", ".", ".", ".", "2", "4", "."],
                      [".", "6", "4", ".", "1", ".", "5", "9", "."], [".", "9", "8", ".", ".", ".", "3", ".", "."],
                      [".", ".", ".", "8", ".", "3", ".", "2", "."], [".", ".", ".", ".", ".", ".", ".", ".", "6"],
                      [".", ".", ".", "2", "7", "5", "9", ".", "."]])
